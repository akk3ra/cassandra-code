public class CassReadWrite {

	public static final String HOST = "localhost";
	public static final int PORT = 9160;

		public static void main(String args[]){
		
				//Create a connection to the Cassandra server and obtain a client object.
				
				TTransport transport = nre TSocket(HOST, PORT);
				TFramedTransport tf = new TFramedTransport(transport);
				TProtocol protocol = new TBinaryProtocol(tf);
				Cassandra.Client client = new Cassandra.Client(protocol);
				
				tf.open();
				String keyspace = "flinkspace";
				Stirng cfName = "FeedStore";
				client.set_keyspace(keyspace);
				
				byte[] key1 = "key1".getBytes();
				byte[] key2 = "key2".getBytes();
				byte[] key3 = "key3".getBytes();
				byte[] key4 = "key4".getBytes();
				
				ColumnParent parent = new ColumnParent(cfName);
				ColumnPath colpath = new ColumnPath(cfName);
				
				long longTime = System.currentTimeMillis();
				client.insert(ByteBuffer.wrap(key1)
							, parent
								, new Column(ByuteBuffer.wrap.("name".getBytes(UTF8)),ByuteBuffer.wrap.("Sandeep Akkera".getBytes(UTF8)), longTime)
									, ConsistencyLevel.ONE);
				client.insert(ByteBuffer.wrap(key1)
							, parent
								, new Column(ByuteBuffer.wrap.("age".getBytes(UTF8)),ByuteBuffer.wrap.("29".getBytes(UTF8)), longTime)
									, ConsistencyLevel.ONE);
									
				client.insert(ByteBuffer.wrap(key2)
							, parent
								, new Column(ByuteBuffer.wrap.("name".getBytes(UTF8)),ByuteBuffer.wrap.("Sravani Akkera".getBytes(UTF8)), longTime)
									, ConsistencyLevel.ONE);
				client.insert(ByteBuffer.wrap(key2)
							, parent
								, new Column(ByuteBuffer.wrap.("age".getBytes(UTF8)),ByuteBuffer.wrap.("27".getBytes(UTF8)), longTime)
									, ConsistencyLevel.ONE);
				client.insert(ByteBuffer.wrap(key3)
							, parent
								, new Column(ByuteBuffer.wrap.("name".getBytes(UTF8)),ByuteBuffer.wrap.("Deepika Akkera".getBytes(UTF8)), longTime)
									, ConsistencyLevel.ONE);
				client.insert(ByteBuffer.wrap(key3)
							, parent
								, new Column(ByuteBuffer.wrap.("age".getBytes(UTF8)),ByuteBuffer.wrap.("22".getBytes(UTF8)), longTime)
									, ConsistencyLevel.ONE);
			
			
			SlicePredicate predicate = new SlicePredicate();
			
			List<Column> colList = new ArrayList<Column>();
			colList.add(ByteBuffer.wrap("name".getBytes()));
			colList.add(ByteBuffer.wrap("age".getBytes()));
			
			predicate.columns = colList;
			
			
			
			KeyRange keyRange = new KeyRange();
			keyRange.set_start(ByteBuffer.wrap(key1));
			keyRange.set_end(ByteBuffer.wrap(key4));
			
			
			List<KeySlice> keySlices = client.get_range_slice(parent, predicate, keyRange, ConsistencyLevel.ONE);
			
			for(KeySlice keyslice:keySlices){
				
				System.out.println("Row retrieved-->"+keyslice.getRowKey());
				List<ColumnOrSuperColumn> colorSuperCol = keyslice.getColumns();
				
				for(ColumnOrSuperColumn cosc: colorSuperCol){
					Column col1 = cosc.column;
					
					System.out.println("Column name-->"+(new String(col1.name, UTF8)));
					System.out.println("Column value-->"+(new String(col1.value, UTF8)));
					
				}
			}
		
		}
}